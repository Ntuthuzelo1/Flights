{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { flightGet } from '../fn/flight/flight-get';\nimport { flightGet$Plain } from '../fn/flight/flight-get-plain';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FlightService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `flightGet()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightGet$Plain$Response(params, context) {\n    return flightGet$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightGet$Plain(params, context) {\n    return this.flightGet$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightGet$Response(params, context) {\n    return flightGet(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightGet(params, context) {\n    return this.flightGet$Response(params, context).pipe(map(r => r.body));\n  }\n}\nFlightService.FlightGetPath = '/Flight';\nFlightService.ɵfac = function FlightService_Factory(t) {\n  return new (t || FlightService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nFlightService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlightService,\n  factory: FlightService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,eAAe,QAAQ,+BAA+B;;;;AAK/D,OAAM,MAAOC,aAAc,SAAQH,WAAW;EAC5CI,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,wBAAwB,CAACC,MAA+B,EAAEC,OAAqB;IAC7E,OAAOP,eAAe,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAClE;EAEA;;;;;;EAMAP,eAAe,CAACM,MAA+B,EAAEC,OAAqB;IACpE,OAAO,IAAI,CAACF,wBAAwB,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACxDZ,GAAG,CAAEa,CAAsC,IAAsBA,CAAC,CAACC,IAAI,CAAC,CACzE;EACH;EAEA;;;;;;EAMAC,kBAAkB,CAACN,MAAyB,EAAEC,OAAqB;IACjE,OAAOR,SAAS,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC5D;EAEA;;;;;;EAMAR,SAAS,CAACO,MAAyB,EAAEC,OAAqB;IACxD,OAAO,IAAI,CAACK,kBAAkB,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAClDZ,GAAG,CAAEa,CAAsC,IAAsBA,CAAC,CAACC,IAAI,CAAC,CACzE;EACH;;AAlDWV,aAAc,CAMTY,aAAa,GAAG,SAAS;AAN9BZ,aAAc;mBAAdA,aAAa;AAAA;AAAbA,aAAc;SAAdA,aAAa;EAAAa,SAAbb,aAAa;EAAAc,YADA;AAAM","names":["map","BaseService","flightGet","flightGet$Plain","FlightService","constructor","config","http","flightGet$Plain$Response","params","context","rootUrl","pipe","r","body","flightGet$Response","FlightGetPath","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Bhalz\\source\\repos\\Flights\\ClientApp\\src\\app\\api\\services\\flight.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { flightGet } from '../fn/flight/flight-get';\r\nimport { FlightGet$Params } from '../fn/flight/flight-get';\r\nimport { flightGet$Plain } from '../fn/flight/flight-get-plain';\r\nimport { FlightGet$Plain$Params } from '../fn/flight/flight-get-plain';\r\nimport { FlightRm } from '../models/flight-rm';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FlightService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `flightGet()` */\r\n  static readonly FlightGetPath = '/Flight';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightGet$Plain$Response(params?: FlightGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n    return flightGet$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightGet$Plain(params?: FlightGet$Plain$Params, context?: HttpContext): Observable<Array<FlightRm>> {\r\n    return this.flightGet$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightGet$Response(params?: FlightGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n    return flightGet(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightGet(params?: FlightGet$Params, context?: HttpContext): Observable<Array<FlightRm>> {\r\n    return this.flightGet$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}