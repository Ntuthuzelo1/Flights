{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { findPassenger$Plain } from '../fn/passenger/find-passenger-plain';\nimport { registerPassenger } from '../fn/passenger/register-passenger';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class PassengerService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `registerPassenger()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `registerPassenger()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  registerPassenger$Response(params, context) {\n    return registerPassenger(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `registerPassenger$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  registerPassenger(params, context) {\n    return this.registerPassenger$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findPassenger()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findPassenger$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findPassenger$Plain$Response(params, context) {\n    return findPassenger$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findPassenger$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findPassenger$Plain(params, context) {\n    return this.findPassenger$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findPassenger()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findPassenger$Plain$Response(params) {\n    const rb = new RequestBuilder(this.rootUrl, PassengerService.FindPassengerPath, 'get');\n    if (params) {\n      rb.path('email', params.email, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain'\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findPassenger$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findPassenger(params, context) {\n    return this.findPassenger$Response(params, context).pipe(map(r => r.body));\n  }\n}\nPassengerService.RegisterPassengerPath = '/Passenger';\nPassengerService.FindPassengerPath = '/Passenger/{email}';\nPassengerService.ɵfac = function PassengerService_Factory(t) {\n  return new (t || PassengerService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nPassengerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PassengerService,\n  factory: PassengerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAM7C,SAASC,mBAAmB,QAAQ,sCAAsC;AAG1E,SAASC,iBAAiB,QAAQ,oCAAoC;;;;AAItE,OAAM,MAAOC,gBAAiB,SAAQH,WAAW;EAC/CI,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,0BAA0B,CAACC,MAAiC,EAAEC,OAAqB;IACjF,OAAOP,iBAAiB,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACpE;EAEA;;;;;;EAMAP,iBAAiB,CAACM,MAAiC,EAAEC,OAAqB;IACxE,OAAO,IAAI,CAACF,0BAA0B,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC1DZ,GAAG,CAAEa,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;EAEA;;EAGA;;;;;;EAMAC,4BAA4B,CAACN,MAAkC,EAAEC,OAAqB;IACpF,OAAOR,mBAAmB,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACtE;EAEA;;;;;;EAMAR,mBAAmB,CAACO,MAAkC,EAAEC,OAAqB;IAC3E,OAAO,IAAI,CAACK,4BAA4B,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC5DZ,GAAG,CAAEa,CAAkC,IAAkBA,CAAC,CAACC,IAAI,CAAC,CACjE;EACH;EAEA;;;;;;EAMAC,4BAA4B,CAACN,MAE5B;IAEC,MAAMO,EAAE,GAAG,IAAIC,cAAc,CAAC,IAAI,CAACN,OAAO,EAAEP,gBAAgB,CAACc,iBAAiB,EAAE,KAAK,CAAC;IACtF,IAAIT,MAAM,EAAE;MACVO,EAAE,CAACG,IAAI,CAAC,OAAO,EAAEV,MAAM,CAACW,KAAK,EAAE,EAAE,CAAC;;IAGpC,OAAO,IAAI,CAACb,IAAI,CAACc,OAAO,CAACL,EAAE,CAACM,KAAK,CAAC;MAChCC,YAAY,EAAE,MAAM;MACpBC,MAAM,EAAE;KACT,CAAC,CAAC,CAACZ,IAAI,CACNa,MAAM,CAAEZ,CAAM,IAAKA,CAAC,YAAYa,YAAY,CAAC,EAC7C1B,GAAG,CAAEa,CAAoB,IAAI;MAC3B,OAAOA,CAAoC;IAC7C,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAc,aAAa,CAAClB,MAA4B,EAAEC,OAAqB;IAC/D,OAAO,IAAI,CAACkB,sBAAsB,CAACnB,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACtDZ,GAAG,CAAEa,CAAkC,IAAkBA,CAAC,CAACC,IAAI,CAAC,CACjE;EACH;;AA3FWV,gBAAiB,CAMZyB,qBAAqB,GAAG,YAAY;AANzCzB,gBAAiB,CA+BZc,iBAAiB,GAAG,oBAAoB;AA/B7Cd,gBAAiB;mBAAjBA,gBAAgB;AAAA;AAAhBA,gBAAiB;SAAjBA,gBAAgB;EAAA0B,SAAhB1B,gBAAgB;EAAA2B,YADH;AAAM","names":["map","BaseService","findPassenger$Plain","registerPassenger","PassengerService","constructor","config","http","registerPassenger$Response","params","context","rootUrl","pipe","r","body","findPassenger$Plain$Response","rb","RequestBuilder","FindPassengerPath","path","email","request","build","responseType","accept","filter","HttpResponse","findPassenger","findPassenger$Response","RegisterPassengerPath","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Bhalz\\source\\repos\\Flights\\ClientApp\\src\\app\\api\\services\\passenger.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { findPassenger } from '../fn/passenger/find-passenger';\r\nimport { FindPassenger$Params } from '../fn/passenger/find-passenger';\r\nimport { findPassenger$Plain } from '../fn/passenger/find-passenger-plain';\r\nimport { FindPassenger$Plain$Params } from '../fn/passenger/find-passenger-plain';\r\nimport { PassengerRm } from '../models/passenger-rm';\r\nimport { registerPassenger } from '../fn/passenger/register-passenger';\r\nimport { RegisterPassenger$Params } from '../fn/passenger/register-passenger';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PassengerService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `registerPassenger()` */\r\n  static readonly RegisterPassengerPath = '/Passenger';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `registerPassenger()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  registerPassenger$Response(params?: RegisterPassenger$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\r\n    return registerPassenger(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `registerPassenger$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  registerPassenger(params?: RegisterPassenger$Params, context?: HttpContext): Observable<void> {\r\n    return this.registerPassenger$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findPassenger()` */\r\n  static readonly FindPassengerPath = '/Passenger/{email}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findPassenger$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findPassenger$Plain$Response(params: FindPassenger$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<PassengerRm>> {\r\n    return findPassenger$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findPassenger$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findPassenger$Plain(params: FindPassenger$Plain$Params, context?: HttpContext): Observable<PassengerRm> {\r\n    return this.findPassenger$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<PassengerRm>): PassengerRm => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findPassenger()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findPassenger$Plain$Response(params: {\r\n    email: string;\r\n  }): Observable<StrictHttpResponse<PassengerRm>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, PassengerService.FindPassengerPath, 'get');\r\n    if (params) {\r\n      rb.path('email', params.email, {});\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<PassengerRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findPassenger$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findPassenger(params: FindPassenger$Params, context?: HttpContext): Observable<PassengerRm> {\r\n    return this.findPassenger$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<PassengerRm>): PassengerRm => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}